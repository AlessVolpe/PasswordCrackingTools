[
    {
        "label": "click",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "click",
        "description": "click",
        "detail": "click",
        "documentation": {}
    },
    {
        "label": "Hasher",
        "importPath": "Hasher",
        "description": "Hasher",
        "isExtraImport": true,
        "detail": "Hasher",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "AnalizerFunctions",
        "importPath": "AnalyzerFunctions",
        "description": "AnalyzerFunctions",
        "isExtraImport": true,
        "detail": "AnalyzerFunctions",
        "documentation": {}
    },
    {
        "label": "Hasher",
        "kind": 6,
        "importPath": "Hasher.Hasher",
        "description": "Hasher.Hasher",
        "peekOfCode": "class Hasher:\n    def __init__(self, dump_file, hash_file):\n        self._dump_file = dump_file\n        self._hash_file = hash_file\n        self._hash_list = []\n    #region Properties\n    @property\n    def dump_file(self):\n        return self._dump_file\n    @property",
        "detail": "Hasher.Hasher",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Hasher.Main",
        "description": "Hasher.Main",
        "peekOfCode": "def main(output, file_name):\n    hasher = Hasher(output, file_name)\n    hasher.hashLister()\n    print('Hash dumped in ' + output)\nif __name__ == '__main__':\n    main()",
        "detail": "Hasher.Main",
        "documentation": {}
    },
    {
        "label": "AnalizerFunctions",
        "kind": 6,
        "importPath": "PasswordMaskAnalyzer.AnalyzerFunctions",
        "description": "PasswordMaskAnalyzer.AnalyzerFunctions",
        "peekOfCode": "class AnalizerFunctions:\n    def __init__(self):     \n        self._lower = list(string.ascii_lowercase)\n        self._upper = [x.upper() for x in self._lower]\n        self._digits = list(str(range(10)))\n    #region Properties\n    @property\n    def lower(self):\n        return self._lower\n    @property",
        "detail": "PasswordMaskAnalyzer.AnalyzerFunctions",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "PasswordMaskAnalyzer.Main",
        "description": "PasswordMaskAnalyzer.Main",
        "peekOfCode": "def main(top, file_name):\n    af = AnalizerFunctions()\n    with open(file_name, 'r') as f:\n        lines = f.read().splitlines()\n    print(af.topX(wordlist=lines, num=top))\nif __name__ == '__main__':\n    main()",
        "detail": "PasswordMaskAnalyzer.Main",
        "documentation": {}
    }
]